package com.xt.leetcode;

import java.util.Vector;

/**
 * 2029.石子游戏 IX
 * 描述
 * Alice 和 Bob 再次设计了一款新的石子游戏。现有一行 n 个石子，每个石子都有一个关联的数字表示它的价值。给你一个整数数组 stones ，其中 stones[i] 是第 i 个石子的价值。
 * <p>
 * Alice 和 Bob 轮流进行自己的回合，Alice 先手。每一回合，玩家需要从 stones 中移除任一石子。
 * <p>
 * 如果玩家移除石子后，导致 所有已移除石子 的价值 总和 可以被 3 整除，那么该玩家就 输掉游戏 。
 * 如果不满足上一条，且移除后没有任何剩余的石子，那么 Bob 将会直接获胜（即便是在 Alice 的回合）。
 * 假设两位玩家均采用 最佳 决策。如果 Alice 获胜，返回 true ；如果 Bob 获胜，返回 false 。
 * <p>
 *  
 * <p>
 * 示例 1：
 * <p>
 * 输入：stones = [2,1]
 * 输出：true
 * 解释：游戏进行如下：
 * - 回合 1：Alice 可以移除任意一个石子。
 * - 回合 2：Bob 移除剩下的石子。
 * 已移除的石子的值总和为 1 + 2 = 3 且可以被 3 整除。因此，Bob 输，Alice 获胜。
 * 示例 2：
 * <p>
 * 输入：stones = [2]
 * 输出：false
 * 解释：Alice 会移除唯一一个石子，已移除石子的值总和为 2 。
 * 由于所有石子都已移除，且值总和无法被 3 整除，Bob 获胜。
 * 示例 3：
 * <p>
 * 输入：stones = [5,1,2,4,3]
 * 输出：false
 * 解释：Bob 总会获胜。其中一种可能的游戏进行方式如下：
 * - 回合 1：Alice 可以移除值为 1 的第 2 个石子。已移除石子值总和为 1 。
 * - 回合 2：Bob 可以移除值为 3 的第 5 个石子。已移除石子值总和为 = 1 + 3 = 4 。
 * - 回合 3：Alices 可以移除值为 4 的第 4 个石子。已移除石子值总和为 = 1 + 3 + 4 = 8 。
 * - 回合 4：Bob 可以移除值为 2 的第 3 个石子。已移除石子值总和为 = 1 + 3 + 4 + 2 = 10.
 * - 回合 5：Alice 可以移除值为 5 的第 1 个石子。已移除石子值总和为 = 1 + 3 + 4 + 2 + 5 = 15.
 * Alice 输掉游戏，因为已移除石子值总和（15）可以被 3 整除，Bob 获胜。
 * <p>
 * 提示：
 * <p>
 * 1 <= stones.length <= 10^5
 * 1 <= stones[i] <= 10^4
 * <p>
 * 来源：力扣（LeetCode）
 * 链接：https://leetcode-cn.com/problems/stone-game-ix
 * 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
 * 解题思路：
 * 第一，数字类型有很多，但是其实我们可以分个类，因为是按照3的倍数来算，所以18其实和3的作用是一样的，1，4，7，10...的作用也都是一样的。
 * 所以我们只要按照%3的余数来分类，分为0，1，2三类就好。
 * 第二，如果选中0的话，那么等于把当前的位置交给了对象。同理，对面也可以选择0把选择权交回。所以我们只要统计0的次数是否是偶数即可。奇数代表有选择权交由对方的权利，偶数则没有。
 * 第三，这样，剩下的就是1，2两类的数量了。假设我第一轮选择的1或者2是一个必胜的结果，那么后面不论对面怎么选，我都选一个可以和对方选择和为3的数字。所以中间这些步骤都可以省略，
 * 所以，1个1，N个2的最终结果，和11个1，10+N个2的结果是一样的。同理，N个1，1个2的最终结果和10+N个1，11个2的结果是一样的。
 * 第四，1个1，N个2的结果，如果num0的数量为偶数时。一定是先选择的赢。2个1，1个2，也一定是先选择的赢。因为先选择的只要选择那个唯一的1或者2，后选择的只能选择2或者1，则后选择的输。
 * 第四，1个1，N个2的结果，如果num0的数量为技数时。则判断两者差值是否大于等于3，大于等于3时则先选择的人也一定赢。比如A选择2，B只能选择2，A选择1，B选择2，A选择0，则B选择2输掉比赛。
 * 第六，如果1和2的数量有一方为0时，则判断1或者2的数量是否大于3即可。大于3的话，一定是先选择的人输。
 * <p>
 * <p>
 * state:
 */
public class Solution2029 {

    public boolean stoneGameIX(int[] stones) {

        int num0 = 0;
        int num1 = 0;
        int num2 = 0;
        for (int i = 0; i < stones.length; i++) {
            int value = stones[i] % 3;
            if (value == 0) {
                num0++;
            } else if (value == 1) {
                num1++;
            } else {
                num2++;
            }
        }

        boolean firstSelectWin = num0 % 2 == 0;
        if (num1 == 0 && num2 == 0) {
            return false;
        }
        if (num1 > 0 && num2 > 0) {
            //a如果先选并且0的数量为偶数则一定赢
            if (firstSelectWin) {
                return true;
            }
            int abs = Math.abs(num1 - num2);
            if (abs >= 3) {
                return true;
            }
            return false;
        }
        if (num1 >= 3 || num2 >= 3) {
            return !firstSelectWin;
        }
        return false;
    }
}